[{"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\index.js":"1","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\App.js":"2","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\reportWebVitals.js":"3","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\reusables\\Protected.js":"4","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\auth\\Login.js":"5","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\home\\Home.js":"6","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\reusables\\SideBar.js":"7","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\auth\\Profile.js":"8","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\Konstants.js":"9","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\services\\Services.js":"10","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\staff\\Staff.js":"11","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\rooms\\Rooms.js":"12","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\reducers\\index.js":"13","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\reservation\\Reservations.js":"14","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\functions\\HelperFunctions.js":"15","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\firebase\\index.js":"16","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\rooms\\RoomForm.js":"17","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\services\\ServiceForm.js":"18","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\staff\\StaffForm.js":"19","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\functions\\IneractionFunctions.js":"20","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\reducers\\Reducers.js":"21","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\actions\\index.js":"22","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\Messaging\\Messaging.js":"23","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\reusables\\MessagingForm.js":"24","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\reusables\\ConfirmationModal.js":"25"},{"size":925,"mtime":1607727600635,"results":"26","hashOfConfig":"27"},{"size":1262,"mtime":1607768232551,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"27"},{"size":707,"mtime":1607777669831,"results":"30","hashOfConfig":"27"},{"size":3285,"mtime":1608423658442,"results":"31","hashOfConfig":"27"},{"size":8001,"mtime":1608575383472,"results":"32","hashOfConfig":"27"},{"size":7068,"mtime":1608730802816,"results":"33","hashOfConfig":"27"},{"size":8482,"mtime":1608658236541,"results":"34","hashOfConfig":"27"},{"size":4389,"mtime":1608675578871,"results":"35","hashOfConfig":"27"},{"size":7304,"mtime":1608578024193,"results":"36","hashOfConfig":"27"},{"size":5675,"mtime":1608575356345,"results":"37","hashOfConfig":"27"},{"size":7967,"mtime":1608578133265,"results":"38","hashOfConfig":"27"},{"size":280,"mtime":1607733892903,"results":"39","hashOfConfig":"27"},{"size":8949,"mtime":1608579027799,"results":"40","hashOfConfig":"27"},{"size":2,"mtime":1607866718197,"results":"41","hashOfConfig":"42"},{"size":568,"mtime":1607720302344,"results":"43","hashOfConfig":"27"},{"size":7784,"mtime":1607883383660,"results":"44","hashOfConfig":"27"},{"size":4424,"mtime":1607878087849,"results":"45","hashOfConfig":"27"},{"size":6172,"mtime":1607993813560,"results":"46","hashOfConfig":"27"},{"size":5249,"mtime":1608577121050,"results":"47","hashOfConfig":"27"},{"size":455,"mtime":1607733861238,"results":"48","hashOfConfig":"27"},{"size":514,"mtime":1607734160671,"results":"49","hashOfConfig":"27"},{"size":9829,"mtime":1608675453553,"results":"50","hashOfConfig":"27"},{"size":3289,"mtime":1608483060234,"results":"51","hashOfConfig":"27"},{"size":909,"mtime":1608577599911,"results":"52","hashOfConfig":"27"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"2vhmgx",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dvlopt",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"55"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\index.js",[],["108","109"],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\App.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\reportWebVitals.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\reusables\\Protected.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\auth\\Login.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\home\\Home.js",["110","111"],"import React, { Component } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport FolderIcon from \"@material-ui/icons/Folder\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport EventSeatIcon from \"@material-ui/icons/EventSeat\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport MeetingRoomIcon from \"@material-ui/icons/MeetingRoom\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport \"../../css/Home.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { getDashboardDataAction } from \"../../machinery/actions\";\r\nimport { deleteReservation } from \"../../machinery/functions/IneractionFunctions\";\r\nimport TextsmsIcon from \"@material-ui/icons/Textsms\";\r\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport MessagingForm from \"../../reusables/MessagingForm\";\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dashboard: {},\r\n      emailMode: false,\r\n      smsMode: false,\r\n      receiver: '',\r\n      messageType: \"\",\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps({ dashboard }) {\r\n    this.setState({ dashboard: dashboard });\r\n  }\r\n  componentDidMount() {\r\n    let dashboard = this.props.dashboard;\r\n    this.setState({ dashboard: dashboard });\r\n  }\r\n\r\n  deleteUserReservation = async (item) => {\r\n    let { bills_today } = this.state.dashboard;\r\n    let filtered = bills_today.filter((x) => x.id !== item.id);\r\n    let newDash = { ...this.state.dashboard };\r\n    newDash.bills_today = filtered;\r\n    this.setState({ dashboard: newDash });\r\n\r\n    let res = await deleteReservation(this.props.token, item.reservation.id);\r\n    if (res.success) {\r\n      this.props.saveDashboardData();\r\n    }\r\n  };\r\n\r\n  handleShow = () => {\r\n    this.setState({ emailMode: false, smsMode: false });\r\n  };\r\n\r\n  sendSMS = (user) => {\r\n    this.setState({  receiver: user.phone, messageType: \"SMS\" }, ()=>this.setState({smsMode: true}));\r\n    \r\n  };\r\n  sendEmail = (user) => {\r\n    this.setState({ receiver: user.email, messageType: \"EMAIL\" },()=>this.setState({  emailMode: true}));\r\n  };\r\n  recentReservations = () => {\r\n    const { bills_today } = this.state.dashboard;\r\n    return (\r\n      <Paper elevation={3} id=\"surface\">\r\n        <div id=\"booking-table-header\">\r\n          <h3>Recent Reservations</h3>\r\n          <div onClick = {this.props.saveDashboardData}>\r\n            <RefreshIcon style={{ color: \"grey\" }} />\r\n          </div>\r\n        </div>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>No.</th>\r\n              <th>Guest</th>\r\n              <th>Phone</th>\r\n              <th>Check In</th>\r\n              <th>Check Out</th>\r\n              <th>Status</th>\r\n              <th>Booking ID</th>\r\n              <th>Room Type</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {bills_today && bills_today.length\r\n              ? bills_today.map((bill, index) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td>{index + 1}</td>\r\n                      <td>{bill.reservation.guest.fname}</td>\r\n                      <td>{bill.reservation.guest.phone}</td>\r\n                      <td>{bill.reservation.check_in_date}</td>\r\n                      <td>{bill.reservation.check_out_date}</td>\r\n                      <td>{bill.is_paid ? \"PAID\" : \"PENDING\"}</td>\r\n                      <td>{bill.reservation.booking_code}</td>\r\n                      <td>{bill.reservation.room.type}</td>\r\n                      <td style={{ display: \"flex\" }}>\r\n                        <div\r\n                          id=\"action\"\r\n                          className=\"center-me edit\"\r\n                          onClick={() => this.sendSMS(bill.reservation.guest)}\r\n                        >\r\n                          <TextsmsIcon id=\"action-icon\" />\r\n                        </div>\r\n                        <div\r\n                          id=\"action\"\r\n                          className=\"center-me edit\"\r\n                          onClick={() => this.sendEmail(bill.reservation.guest)}\r\n                        >\r\n                          <EmailIcon id=\"action-icon\" />\r\n                        </div>\r\n                        <div\r\n                          id=\"action\"\r\n                          className=\"center-me delete\"\r\n                          onClick={() => this.deleteUserReservation(bill)}\r\n                        >\r\n                          <DeleteIcon id=\"action-icon\" />\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              : null}\r\n          </tbody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  };\r\n  render() {\r\n    const { dashboard } = this.state;\r\n    return (\r\n      <div>\r\n        <div id=\"figures-main-container\">\r\n          <div\r\n            id=\"figure-container\"\r\n            className=\"z-depth-2 card-me\"\r\n            style={{ backgroundColor: \"#3598dc\" }}\r\n          >\r\n            <Avatar id=\"avatar\" style={{ backgroundColor: \"#2874A6\" }}>\r\n              <EventSeatIcon style={{ fontSize: 40, color: \"white\" }} />\r\n            </Avatar>\r\n            <div id=\"figures-details\">\r\n              <span>Reservations</span>\r\n              <span>{dashboard.reservation_count}</span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            id=\"figure-container\"\r\n            className=\"z-depth-2 card-me\"\r\n            style={{ backgroundColor: \"#E67D21\" }}\r\n          >\r\n            <Avatar id=\"avatar\" style={{ backgroundColor: \"#D35400\" }}>\r\n              <PeopleIcon style={{ fontSize: 40, color: \"white\" }} />\r\n            </Avatar>\r\n            <div id=\"figures-details\">\r\n              <span>Guests</span>\r\n              <span>{dashboard.guests_count}</span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            id=\"figure-container\"\r\n            className=\"z-depth-2 card-me\"\r\n            style={{ backgroundColor: \"#8E44AD\" }}\r\n          >\r\n            <Avatar id=\"avatar\" style={{ backgroundColor: \"#7D3C98\" }}>\r\n              <ContactSupportIcon style={{ fontSize: 40, color: \"white\" }} />\r\n            </Avatar>\r\n            <div id=\"figures-details\">\r\n              <span>Responses</span>\r\n              <span>{dashboard.queries_count}</span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            id=\"figure-container\"\r\n            className=\"z-depth-2 card-me\"\r\n            style={{ backgroundColor: \"#28a745\" }}\r\n          >\r\n            <Avatar id=\"avatar\" style={{ backgroundColor: \"#1E8449\" }}>\r\n              <AccountBalanceWalletIcon\r\n                style={{ fontSize: 40, color: \"white\" }}\r\n              />\r\n            </Avatar>\r\n            <div id=\"figures-details\">\r\n              <span>Earnings</span>\r\n              <span>{dashboard.earnings}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {this.recentReservations()}\r\n\r\n        {this.state.emailMode || this.state.smsMode ? (\r\n          <MessagingForm\r\n            type={this.state.messageType}\r\n            receiver={this.state.receiver}\r\n            show={this.state.emailMode || this.state.smsMode}\r\n            handleShow={this.handleShow}\r\n            onHide={() => this.setState({ emailMode: false, smsMode: false })}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dashboard: state.dashboard,\r\n    token: state.user.token,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      saveDashboardData: getDashboardDataAction,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\reusables\\SideBar.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\auth\\Profile.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\Konstants.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\services\\Services.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\staff\\Staff.js",["112","113","114"],"import React, { Component } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Table, FormControl } from \"react-bootstrap\";\r\nimport StaffForm from \"./StaffForm\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { getDashboardDataAction } from \"../../machinery/actions\";\r\nimport { deleteStaff } from \"../../machinery/functions/IneractionFunctions\";\r\nclass Staff extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showAddStaff: false,\r\n      staff: [],\r\n      filtered: [],\r\n      query: \"\",\r\n    };\r\n  }\r\n  handleShow = () => {\r\n    this.setState({ showAddStaff: false });\r\n  };\r\n  componentWillReceiveProps({ staff }) {\r\n    this.setState({ staff: staff });\r\n  }\r\n  componentDidMount() {\r\n    let staff = this.props.staff;\r\n    this.setState({ staff: staff });\r\n  }\r\n  searchInputListener = (e) => {\r\n    const content = e.target.value.toLowerCase();\r\n    const filtered = this.state.staff.filter((user) => {\r\n      const arr = user.fname.toLowerCase().split(content);\r\n      if (arr.length > 1) return user;\r\n      return null;\r\n    });\r\n    this.setState({ filtered });\r\n  };\r\n\r\n  deleteAStaff = async(user)=>{\r\n    let { staff } = this.state;\r\n    let filtered = staff.filter((x) => x.user !== user.user);\r\n    this.setState({ staff: filtered });\r\n    let res = await deleteStaff(this.props.token, user.fname)\r\n    if (res && res.success){\r\n      this.props.saveDashboardData();\r\n    }\r\n  }\r\n  render() {\r\n    const { staff, filtered } = this.state;\r\n    return (\r\n      <Paper elevation={3} id=\"surface\">\r\n        <div id=\"booking-table-header\">\r\n          <h3>All Staff</h3>\r\n          <div onClick = {this.props.saveDashboardData}>\r\n            <RefreshIcon style={{ color: \"grey\" }} />\r\n          </div>\r\n        </div>\r\n        <Divider />\r\n        <div className=\"space-me\" id=\"interactions-container\">\r\n          <div>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => this.setState({ showAddStaff: true })}\r\n            >\r\n              Add New\r\n            </Button>\r\n          </div>\r\n          <div className=\"side-ways\">\r\n            <span id=\"search-name\">Search:</span>\r\n            <FormControl\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              className=\"mr-sm-2\"\r\n              onChange={(e) => {\r\n                this.setState({ query: e.target.value });\r\n                this.searchInputListener(e);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>No.</th>\r\n              <th>Name</th>\r\n              <th>Phone</th>\r\n              <th>Email</th>\r\n              <th>ID Number</th>\r\n              <th>Address</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filtered.length || this.state.query\r\n              ? filtered.map((user, index) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td>{index+1}</td>\r\n                      <td>\r\n                        {user ? user.fname : \"\" + \" \" + user ? user.lname : \"\"}\r\n                      </td>\r\n                      <td>{user ? user.phone : \"\"}</td>\r\n                      <td>{user ? user.email : \"\"}</td>\r\n                      <td>{user ? user.idNumber : \"\"}</td>\r\n                      <td>{user ? user.homeAddress : \"\"}</td>\r\n                      <td style={{ display: \"flex\" }}>\r\n                        <div id=\"action\" className=\"center-me delete\"  onClick={()=>this.deleteAStaff(user)}>\r\n                          <DeleteIcon id=\"action-icon\" />\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              : staff && staff.length\r\n              ? staff.map((user, index) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td>{index+1}</td>\r\n                      <td>\r\n                        {user ? user.fname : \"\" + \" \" + user ? user.lname : \"\"}\r\n                      </td>\r\n                      <td>{user ? user.phone : \"\"}</td>\r\n                      <td>{user ? user.email : \"\"}</td>\r\n                      <td>{user ? user.idNumber : \"\"}</td>\r\n                      <td>{user ? user.homeAddress : \"\"}</td>\r\n                      <td style={{ display: \"flex\" }}>\r\n                        <div id=\"action\" className=\"center-me delete\" onClick={()=>this.deleteAStaff(user)}>\r\n                          <DeleteIcon id=\"action-icon\" />\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              : null}\r\n          </tbody>\r\n        </Table>\r\n        <StaffForm\r\n          show={this.state.showAddStaff}\r\n          handleShow={this.handleShow}\r\n          handleShow={this.handleShow}\r\n          onHide={() => this.setState({ showAddStaff: false })}\r\n        />\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    staff: state.dashboard.staff,\r\n    token: state.user.token,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      saveDashboardData: getDashboardDataAction,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Staff);\r\n","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\rooms\\Rooms.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\reducers\\index.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\reservation\\Reservations.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\functions\\HelperFunctions.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\firebase\\index.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\rooms\\RoomForm.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\services\\ServiceForm.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\staff\\StaffForm.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\functions\\IneractionFunctions.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\reducers\\Reducers.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\machinery\\actions\\index.js",[],"C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\pages\\Messaging\\Messaging.js",["115","116","117"],"import React, { Component } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport {\r\n  Table,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Container,\r\n  Button as BTN,\r\n} from \"react-bootstrap\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  deleteResponse,\r\n  deleteTable,\r\n  sendGenericMessage,\r\n} from \"../../machinery/functions/IneractionFunctions\";\r\nimport ReplyIcon from \"@material-ui/icons/Reply\";\r\nimport { getDashboardDataAction } from \"../../machinery/actions\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport ConfirmationModal from \"../../reusables/ConfirmationModal\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport \"../../css/Home.css\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nclass Messaging extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      queries: [],\r\n      confirm: false,\r\n      table: \"\",\r\n      audience: \"\",\r\n      message: \"\",\r\n      type: \"\",\r\n      error: \"\",\r\n      sending: false,\r\n      subject: \"\",\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps({ dashboard }) {\r\n    this.setState({ queries: dashboard.queries });\r\n  }\r\n  componentDidMount() {\r\n    let queries = this.props.dashboard.queries;\r\n    this.setState({ queries: queries });\r\n  }\r\n\r\n  deleteAQueries = async (query) => {\r\n    const { queries } = this.state;\r\n    let filtered = queries.filter((x) => x.id !== query.id);\r\n    this.setState({ queries: filtered });\r\n\r\n    let res = await deleteResponse(this.props.token, query.id);\r\n    if (res && res.success) {\r\n      this.props.saveDashboardData();\r\n    }\r\n  };\r\n  deleteAll = async () => {\r\n    let del = await deleteTable(this.props.token, \"QUERIES\");\r\n    if (del) {\r\n      this.props.saveDashboardData();\r\n      this.setState({ confirm: false });\r\n    }\r\n  };\r\n\r\n  sendBulkMessage = async (e) => {\r\n    const { audience, message, type } = this.state;\r\n    const { staff, guests, bills } = this.props.dashboard;\r\n    let receivers = [];\r\n    e.preventDefault();\r\n    if (!audience || !type || !message)\r\n      return this.setState({\r\n        error: \"please make sure you populate the fields\",\r\n      });\r\n\r\n    this.setState({ error: \"\", sending: true });\r\n\r\n    if (audience === \"ALL_GUESTS\") {\r\n      if (guests && guests.length) {\r\n        guests.map((guest) => {\r\n          if (type === \"EMAIL\") {\r\n            receivers.push(guest.email);\r\n          } else {\r\n            receivers.push(guest.phone);\r\n          }\r\n        });\r\n      } else return [];\r\n    } else if (audience === \"ALL_STAFF\") {\r\n      if (staff && staff.length) {\r\n        staff.map((ST) => {\r\n          if (type === \"EMAIL\") {\r\n            receivers.push(ST.email);\r\n          } else {\r\n            receivers.push(ST.phone);\r\n          }\r\n        });\r\n      } else return [];\r\n    } else {\r\n      if (bills && bills.length) {\r\n        bills.map((bill) => {\r\n          if (!bill.isPaid) {\r\n            if (type === \"EMAIL\") {\r\n              receivers.push(bill.reservation.guest.email);\r\n            } else {\r\n              receivers.push(bill.reservation.guest.phone);\r\n            }\r\n          }\r\n        });\r\n      } else return [];\r\n    }\r\n\r\n    let res = await sendGenericMessage(this.props.token, {\r\n      messageType: this.state.type,\r\n      receiver: type === \"EMAIL\" ? receivers : receivers.toString(),\r\n      message: this.state.message,\r\n      subject: this.state.subject,\r\n    });\r\n    if (res && res.success) {\r\n      this.setState({\r\n        sending: false,\r\n        message: \"\",\r\n        type: \"\",\r\n        subject: \"\",\r\n        audience: \"\",\r\n      });\r\n    } else {\r\n      this.setState({ sending: false, error: \"unable to send Message\" });\r\n    }\r\n  };\r\n\r\n  spitBulkMessaging = () => {\r\n    const { audience, message, type, error, subject } = this.state;\r\n    return (\r\n      <Paper elevation={3} id=\"bulk-messeging-container\">\r\n        <div id=\"booking-table-header\">\r\n          <h3>BULK MESSAGING</h3> \r\n        </div>\r\n        <Divider />\r\n        <Container id=\"form-container\">\r\n          {error ? <p id=\"error-text\">{error}</p> : null}\r\n          <Row>\r\n            <Col md={6} sm={12}>\r\n              {\" \"}\r\n              <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                <Form.Label>Message Type</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  value={type}\r\n                  onChange={(e) => this.setState({ type: e.target.value })}\r\n                >\r\n                  <option>Select the type of message</option>\r\n                  <option value=\"EMAIL\">email</option>\r\n                  {/* <option value=\"SMS\">Sms</option> */}\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col md={6} sm={12}>\r\n              {\" \"}\r\n              <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                <Form.Label>Audience</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  onChange={(e) => this.setState({ audience: e.target.value })}\r\n                  value={audience}\r\n                >\r\n                  <option>Select your audience</option>\r\n                  <option value=\"ALL_GUESTS\">All Guests</option>\r\n                  <option value=\"ALL_STAFF\">All Staff</option>\r\n                  <option value=\"PENDING_PAYMENT\">\r\n                    Guests with pending payment\r\n                  </option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n          {this.state.type === \"EMAIL\" ? (\r\n            <Form.Group>\r\n              <Form.Label>Subject</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={subject}\r\n                onChange={(e) => this.setState({ subject: e.target.value })}\r\n              />\r\n            </Form.Group>\r\n          ) : null}\r\n          <Form.Group>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              id=\"contact-form-field\"\r\n              onChange={(e) => this.setState({ message: e.target.value })}\r\n              value={message}\r\n              placeholder=\"Enter Your Message......\"\r\n              rows={5}\r\n            />\r\n          </Form.Group>\r\n          {this.state.sending ? <LinearProgress color=\"secondary\" /> : null}\r\n          <BTN\r\n            type=\"submit\"\r\n            className=\"button bulk-message-btn\"\r\n            onClick={this.sendBulkMessage}\r\n          >\r\n            Send\r\n          </BTN>\r\n        </Container>\r\n      </Paper>\r\n    );\r\n  };\r\n  spitQuries = () => {\r\n    const { queries } = this.state;\r\n    return (\r\n      <Paper elevation={3} id=\"surface\">\r\n        <div id=\"booking-table-header\">\r\n          <h3>Response From Users</h3>\r\n          <div onClick={this.props.saveDashboardData}>\r\n            <RefreshIcon style={{ color: \"grey\" }} />\r\n          </div>\r\n        </div>\r\n        <Divider />\r\n        <div className=\"space-me\" id=\"interactions-container\">\r\n          <div>\r\n            <Button\r\n              style={{ marginLeft: \"1.5rem\" }}\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => this.setState({ confirm: true })}\r\n            >\r\n              DELETE TABLE\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>No.</th>\r\n              <th>Name</th>\r\n              <th>Email</th>\r\n              <th>Type</th>\r\n              <th>Message</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {queries && queries.length\r\n              ? queries.map((query, index) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td>{index + 1}</td>\r\n                      <td>{query.name}</td>\r\n                      <td>{query.email}</td>\r\n                      <td>{query.type}</td>\r\n                      <td>{query.message}</td>\r\n                      <td style={{ display: \"flex\" }}>\r\n                        <div\r\n                          id=\"action\"\r\n                          className=\"center-me edit\"\r\n                          onClick={() => alert(\"Do you want To reply ? Well I am not configured!!!!!\")}\r\n                        >\r\n                          <ReplyIcon id=\"action-icon\" />\r\n                        </div>\r\n                        <div\r\n                          id=\"action\"\r\n                          className=\"center-me delete\"\r\n                          onClick={() => this.deleteAQueries(query)}\r\n                        >\r\n                          <DeleteIcon id=\"action-icon\" />\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              : null}\r\n          </tbody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.spitBulkMessaging()}\r\n        {this.spitQuries()}\r\n        {this.state.confirm ? (\r\n          <ConfirmationModal\r\n            show={this.state.confirm}\r\n            delete={() => this.deleteAll()}\r\n            toEdit={this.state.toEdit}\r\n            handleShow={this.handleShow}\r\n            onHide={() => this.setState({ confirm: false })}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dashboard: state.dashboard,\r\n    token: state.user.token,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators(\r\n    {\r\n      saveDashboardData: getDashboardDataAction,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Messaging);\r\n","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\reusables\\MessagingForm.js",["118","119"],"import React, { Component } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport { connect } from \"react-redux\";\r\nimport { sendGenericMessage } from \"../machinery/functions/IneractionFunctions\";\r\n\r\nclass MessagingForm extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loading: false,\r\n      message: \"\",\r\n      error: \"\",\r\n      subject: \"\",\r\n      receiver: \"\",\r\n      error: \"\",\r\n      type:\"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const receiver = this.props.receiver;\r\n    this.setState({ receiver: receiver, type:this.props.type });\r\n  }\r\n  componentWillReceiveProps({ receiver, type }) {\r\n    this.setState({ receiver: receiver, type:type });\r\n  }\r\n\r\n  sendMessage = async(e) => {\r\n    const { error, message, subject, receiver } = this.state;\r\n    if (!message) return this.setState({ error: \"please type in a message\" });\r\n    this.setState({ error: \"\", loading: true });\r\n\r\n    let res = await sendGenericMessage(this.props.token, {\r\n        messageType:this.state.type,\r\n        receiver:receiver,\r\n        message:message,\r\n        subject:subject\r\n    })\r\n\r\n    if(res && res.success){\r\n        this.setState({loading:false})\r\n        this.props.handleShow()\r\n    }\r\n    else{\r\n        this.setState({loading:false, error:\"unable to send Message\"})\r\n    }\r\n  };\r\n  render() {\r\n    const { error, message, subject, receiver } = this.state;\r\n    return (\r\n      <Modal\r\n        {...this.props}\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Messaging Form\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form id=\"form\">\r\n            {error ? <p id=\"error-text\">{error}</p> : null}\r\n\r\n            <Form.Group>\r\n              <Form.Label>Reciepient</Form.Label>\r\n              <Form.Control type=\"text\" value={receiver} disabled />\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Subject</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={subject}\r\n                onChange={(e) => this.setState({ subject: e.target.value })}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                id=\"contact-form-field\"\r\n                value={message}\r\n                onChange={(e) => this.setState({ message: e.target.value })}\r\n                placeholder=\"Enter Your Message......\"\r\n                rows={5}\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n          {this.state.loading ? <LinearProgress color=\"secondary\" /> : null}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            className=\"button\"\r\n            variant=\"primary\"\r\n            onClick={this.sendMessage}\r\n          >\r\n            send Message\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.user.token,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, null)(MessagingForm);\r\n","C:\\Users\\tachyon\\Documents\\Webie\\luxcom-admin\\luxcom-admin\\src\\reusables\\ConfirmationModal.js",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":18},{"ruleId":"124","severity":1,"message":"128","line":8,"column":8,"nodeType":"126","messageId":"127","endLine":8,"endColumn":23},{"ruleId":"129","severity":1,"message":"130","line":105,"column":49,"nodeType":"131","messageId":"132","endLine":105,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":125,"column":49,"nodeType":"131","messageId":"132","endLine":125,"endColumn":50},{"ruleId":"133","severity":1,"message":"134","line":145,"column":11,"nodeType":"135","endLine":145,"endColumn":39},{"ruleId":"136","severity":1,"message":"137","line":83,"column":28,"nodeType":"138","messageId":"139","endLine":83,"endColumn":30},{"ruleId":"136","severity":1,"message":"137","line":93,"column":24,"nodeType":"138","messageId":"139","endLine":93,"endColumn":26},{"ruleId":"136","severity":1,"message":"137","line":103,"column":26,"nodeType":"138","messageId":"139","endLine":103,"endColumn":28},{"ruleId":"140","severity":1,"message":"141","line":16,"column":7,"nodeType":"142","messageId":"143","endLine":16,"endColumn":12},{"ruleId":"124","severity":1,"message":"144","line":30,"column":13,"nodeType":"126","messageId":"127","endLine":30,"endColumn":18},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'FolderIcon' is defined but never used.","Identifier","unusedVar","'MeetingRoomIcon' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-dupe-keys","Duplicate key 'error'.","ObjectExpression","unexpected","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]